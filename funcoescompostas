-------------------------------------- Funções Compostas ---------------------------------------------------

CREATE OR REPLACE FUNCTION validar_produto()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.preco < 0 THEN
        RAISE EXCEPTION 'Preço do produto não pode ser negativo.';
    END IF;

    IF NEW.estoque < 0 THEN
        RAISE EXCEPTION 'Estoque do produto não pode ser negativo.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_produto
BEFORE INSERT OR UPDATE ON Produto
FOR EACH ROW EXECUTE FUNCTION validar_produto();


CREATE OR REPLACE FUNCTION realizar_venda_completa(
    p_id_venda INT,
    p_data DATE,
    p_id_cliente INT,
    p_id_funcionario INT,
    p_itens JSON,
    p_parcelas JSON
) RETURNS TEXT AS $$
DECLARE
    item JSON;
    parcela JSON;
    v_id_produto INT;
    v_quantidade INT;
    v_estoque INT;
    parcela_id INT := 1;
BEGIN
    IF NOT EXISTS (SELECT 1 FROM Cliente WHERE id_cliente = p_id_cliente) THEN
        RAISE EXCEPTION 'Erro: Cliente % não existe.', p_id_cliente;
    END IF;

    IF NOT EXISTS (SELECT 1 FROM Funcionario WHERE id_funcionario = p_id_funcionario) THEN
        RAISE EXCEPTION 'Erro: Funcionário % não existe.', p_id_funcionario;
    END IF;

    INSERT INTO Venda(id_venda, data, id_cliente, id_funcionario)
    VALUES (p_id_venda, p_data, p_id_cliente, p_id_funcionario);

    FOR item IN SELECT * FROM json_array_elements(p_itens)
    LOOP
        v_id_produto := (item ->> 'id_produto')::INT;
        v_quantidade := (item ->> 'quantidade')::INT;

        SELECT estoque INTO v_estoque FROM Produto WHERE id_produto = v_id_produto;
        IF NOT FOUND THEN
            RAISE EXCEPTION 'Erro: Produto % não encontrado.', v_id_produto;
        END IF;

        IF v_estoque < v_quantidade THEN
            RAISE EXCEPTION 'Erro: Estoque insuficiente para o produto %.', v_id_produto;
        END IF;

        INSERT INTO Item_Venda(id_venda, id_produto, quantidade)
        VALUES (p_id_venda, v_id_produto, v_quantidade);

        UPDATE Produto SET estoque = estoque - v_quantidade WHERE id_produto = v_id_produto;
    END LOOP;

    FOR parcela IN SELECT * FROM json_array_elements(p_parcelas)
    LOOP
        INSERT INTO Parcela(id_parcela, id_venda, dt_venc, dt_pag, valor, multa)
        VALUES (
            (SELECT COALESCE(MAX(id_parcela), 0) + parcela_id FROM Parcela), 
            p_id_venda,
            (parcela ->> 'dt_venc')::DATE,
            NULL,
            (parcela ->> 'valor')::DECIMAL,
            0
        );
        parcela_id := parcela_id + 1;
    END LOOP;

    RETURN '✅ Venda registrada com sucesso.';

EXCEPTION
    WHEN unique_violation THEN
        RETURN '❌ Erro: Já existe uma venda com esse ID.';
    WHEN foreign_key_violation THEN
        RETURN '❌ Erro: ID de cliente ou funcionário inválido.';
    WHEN OTHERS THEN
        RETURN '❌ Erro inesperado ao registrar a venda. Verifique os dados.';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION realizar_compra_completa(
    p_id_compra INT,
    p_data DATE,
    p_id_fornecedor INT,
    p_itens JSON -- Ex: '[{"id_produto":1,"quantidade":5}, {"id_produto":3,"quantidade":2}]'
) RETURNS TEXT AS $$
DECLARE
    item JSON;
    v_id_produto INT;
    v_quantidade INT;
BEGIN
    -- Inserir Compra
    INSERT INTO Compra(id_compra, data) VALUES (p_id_compra, p_data);

    -- Relacionar com fornecedor
    INSERT INTO Fornece(id_fornecedor, id_compra) VALUES (p_id_fornecedor, p_id_compra);

    -- Inserir itens e atualizar estoque
    FOR item IN SELECT * FROM json_array_elements(p_itens)
    LOOP
        v_id_produto := (item ->> 'id_produto')::INT;
        v_quantidade := (item ->> 'quantidade')::INT;

        INSERT INTO Item_Compra(id_compra, id_produto, quantidade)
        VALUES (p_id_compra, v_id_produto, v_quantidade);

        UPDATE Produto SET estoque = estoque + v_quantidade WHERE id_produto = v_id_produto;
    END LOOP;

    RETURN 'Compra registrada com sucesso.';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION registrar_pagamento_parcela(
    p_id_parcela INT,
    p_data_pagamento DATE,
    p_multa DECIMAL
) RETURNS TEXT AS $$
DECLARE
    ja_paga DATE;
BEGIN
    SELECT dt_pag INTO ja_paga FROM Parcela WHERE id_parcela = p_id_parcela;

    IF ja_paga IS NOT NULL THEN
        RAISE EXCEPTION 'Parcela % já está paga em %.', p_id_parcela, ja_paga;
    END IF;

    UPDATE Parcela
    SET dt_pag = p_data_pagamento, multa = p_multa
    WHERE id_parcela = p_id_parcela;

    RETURN 'Pagamento registrado com sucesso.';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION cancelar_venda(p_id_venda INT)
RETURNS TEXT AS $$
DECLARE
    p_parcela RECORD;
    p_item RECORD;
BEGIN
    -- Verificar se há parcela paga
    FOR p_parcela IN SELECT * FROM Parcela WHERE id_venda = p_id_venda LOOP
        IF p_parcela.dt_pag IS NOT NULL THEN
            RAISE EXCEPTION 'Venda não pode ser cancelada: parcela % já está paga.', p_parcela.id_parcela;
        END IF;
    END LOOP;

    -- Repor estoque dos produtos
    FOR p_item IN SELECT * FROM Item_Venda WHERE id_venda = p_id_venda LOOP
        UPDATE Produto SET estoque = estoque + p_item.quantidade
        WHERE id_produto = p_item.id_produto;
    END LOOP;

    -- Remover parcelas e itens
    DELETE FROM Parcela WHERE id_venda = p_id_venda;
    DELETE FROM Item_Venda WHERE id_venda = p_id_venda;
    DELETE FROM Venda WHERE id_venda = p_id_venda;

    RETURN 'Venda cancelada com sucesso.';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION atualizar_estoque_produto(
    p_id_produto INT,
    p_quantidade INT,
    p_operacao VARCHAR
) RETURNS TEXT AS $$
DECLARE
    v_estoque INT;
BEGIN
    SELECT estoque INTO v_estoque FROM Produto WHERE id_produto = p_id_produto;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Erro: Produto com ID % não encontrado.', p_id_produto;
    END IF;

    IF p_operacao = 'entrada' THEN
        UPDATE Produto SET estoque = estoque + p_quantidade WHERE id_produto = p_id_produto;
    ELSIF p_operacao = 'saida' THEN
        IF v_estoque < p_quantidade THEN
            RAISE EXCEPTION 'Erro: Estoque insuficiente. Atual: %, Solicitado: %', v_estoque, p_quantidade;
        END IF;
        UPDATE Produto SET estoque = estoque - p_quantidade WHERE id_produto = p_id_produto;
    ELSE
        RAISE EXCEPTION 'Erro: Operação inválida. Use "entrada" ou "saida".';
    END IF;

    RETURN '✅ Estoque atualizado com sucesso.';

EXCEPTION
    WHEN OTHERS THEN
        RETURN '❌ Erro ao atualizar estoque. Verifique os dados informados.';
END;
$$ LANGUAGE plpgsql;

---------------------------------------------------- CONSULTAS ÚTEIS --------------------------------------------------

------ Produtos com estoque baixo
SELECT id_produto, nome, estoque
FROM Produto
WHERE estoque < 5
ORDER BY estoque ASC;

------ Total de vendas por cliente
SELECT 
    c.id_cliente,
    c.nome,
    SUM(p.valor + p.multa) AS total_gasto
FROM Cliente c
JOIN Venda v ON v.id_cliente = c.id_cliente
JOIN Parcela p ON p.id_venda = v.id_venda
GROUP BY c.id_cliente, c.nome
ORDER BY total_gasto DESC;

----- Parcelas vencidas e não pagas
SELECT 
    p.id_parcela,
    p.id_venda,
    p.dt_venc,
    p.valor,
    c.nome AS cliente,
    v.data AS data_venda
FROM Parcela p
JOIN Venda v ON v.id_venda = p.id_venda
JOIN Cliente c ON c.id_cliente = v.id_cliente
WHERE p.dt_pag IS NULL AND p.dt_venc < CURRENT_DATE
ORDER BY p.dt_venc ASC;

----- Histórico de movimentação de estoque
SELECT 
    le.id,
    le.id_produto,
    pr.nome AS produto,
    le.operacao,
    le.quantidade,
    le.origem,
    le.data
FROM Log_Estoque le
JOIN Produto pr ON pr.id_produto = le.id_produto
ORDER BY le.data DESC;

----- Vendas realizadas em um período
SELECT 
    v.id_venda,
    v.data,
    c.nome AS cliente,
    f.nome AS funcionario
FROM Venda v
JOIN Cliente c ON c.id_cliente = v.id_cliente
JOIN Funcionario f ON f.id_funcionario = v.id_funcionario
WHERE v.data BETWEEN '2025-01-01' AND '2025-12-31'
ORDER BY v.data;

-----  Faturamento Total do mês atual
SELECT 
    EXTRACT(MONTH FROM dt_pag) AS mes,
    SUM(valor + multa) AS total_pago
FROM Parcela
WHERE dt_pag IS NOT NULL AND DATE_TRUNC('month', dt_pag) = DATE_TRUNC('month', CURRENT_DATE)
GROUP BY mes;

----- Produtos mais vendidos
SELECT 
    p.id_produto,
    p.nome,
    SUM(iv.quantidade) AS total_vendido
FROM Item_Venda iv
JOIN Produto p ON p.id_produto = iv.id_produto
GROUP BY p.id_produto, p.nome
ORDER BY total_vendido DESC
LIMIT 10;

----- Evoluções de vendas por mês
SELECT 
    DATE_TRUNC('month', v.data) AS mes,
    COUNT(DISTINCT v.id_venda) AS total_vendas,
    SUM(p.valor + p.multa) AS total_receita
FROM Venda v
JOIN Parcela p ON p.id_venda = v.id_venda
GROUP BY mes
ORDER BY mes;

----- Funcionário com mais vendas
SELECT 
    f.id_funcionario,
    f.nome,
    COUNT(DISTINCT v.id_venda) AS total_vendas
FROM Funcionario f
JOIN Venda v ON v.id_funcionario = f.id_funcionario
GROUP BY f.id_funcionario, f.nome
ORDER BY total_vendas DESC;


----- Compras feitas por fornecedor
SELECT 
    fo.id_fornecedor,
    fo.nome,
    co.id_compra,
    co.data
FROM Fornecedor fo
JOIN Fornece fz ON fz.id_fornecedor = fo.id_fornecedor
JOIN Compra co ON co.id_compra = fz.id_compra
ORDER BY co.data DESC;
